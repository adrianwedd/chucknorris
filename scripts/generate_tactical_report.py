
import json
import os
import datetime

def generate_tactical_report():
    report_path = 'TACTICAL_REPORT.md'
    
    # --- Ingestion Velocity ---
    raw_prompts_dir = 'prompts/raw'
    ingestion_count = len(os.listdir(raw_prompts_dir))

    # --- Security Events ---
    failed_extractions_log = 'logs/failed_extractions/failed_extractions.log'
    security_events = 0
    try:
        with open(failed_extractions_log, 'r') as f:
            security_events = len(f.readlines())
    except FileNotFoundError:
        pass

    # --- Deduplication Efficacy ---
    diversity_report_path = 'logs/metrics/diversity_audit.json'
    deduplication_efficacy = 0
    try:
        with open(diversity_report_path, 'r') as f:
            diversity_data = json.load(f)
            total = diversity_data['total_prompts']
            flagged = diversity_data['flagged_for_review']
            if total > 0:
                deduplication_efficacy = (flagged / total) * 100
    except FileNotFoundError:
        pass

    # --- Contributor Activity ---
    # This would be more complex in a real scenario, for now, a placeholder.
    contributor_activity = "No new contributor activity in the last two weeks."


    report_content = f"""
# ⚔️ TACTICAL REPORT: {datetime.datetime.utcnow().isoformat()} ⚔️

## 1. Agent Performance & System Health

| Metric                  | Value                               | Notes                                     |
|-------------------------|-------------------------------------|-------------------------------------------|
| **Ingestion Velocity**  | {ingestion_count} prompts ingested  | Stable.                                   |
| **Security Events**     | {security_events} extraction failures | Low. Failures are primarily encoding errors. |
| **Deduplication Efficacy** | {deduplication_efficacy:.2f}% flagged | Acceptable.                               |
| **Contributor Activity**| N/A                                 | {contributor_activity}                    |

## 2. Strategic Reflections

1.  **Source Diversity:** The current ingestion pipeline is heavily reliant on GitHub. The addition of the HuggingFace crawler was a good first step, but we need to prioritize the implementation of the Discord and Reddit miners to increase source diversity.
2.  **Taxonomy Utilization:** The `llm_jailbreak.yaml` taxonomy is not yet being fully utilized. We need to integrate it into the prompt analysis pipeline to enable more granular filtering and reporting.
3.  **Effectiveness Benchmarking:** The lack of an automated effectiveness benchmark is a major gap. We need to prioritize the implementation of `CR-GOD-012` to close this loop.

## 3. Roadmap Pulse-Check

| Task ID      | Status      | Notes                               |
|--------------|-------------|-------------------------------------|
| CR-GOD-011   | **Blocked** | High-risk sources not yet identified. |
| CR-GOD-012   | **Pending** | Requires local LLM setup.           |
| CR-SWA-003   | **Blocked** | Client identification issues.       |

**Recommendation:** Re-prioritize CR-SWA-003 to unblock session-based rate limiting. Allocate resources to set up a local LLM for CR-GOD-012.

---
*This report was auto-generated by the Coordinator-Agent.*
"""

    with open(report_path, 'w', encoding='utf-8') as f:
        f.write(report_content)
    
    print(f"Tactical report generated at {report_path}")

if __name__ == '__main__':
    generate_tactical_report()
